openapi: 3.0.3
info:
  title: Node.js Authentication API
  description: |
    A simple Node.js authentication application with user registration and login functionality using clean architecture.
    
    ## Features
    - User registration with email validation
    - Password hashing with bcrypt
    - JWT token authentication
    - Input validation with Joi
    - Clean architecture implementation
    
    ## Authentication
    This API uses JWT tokens for authentication. Include the token in the Authorization header:
    ```
    Authorization: Bearer <your-jwt-token>
    ```
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000
    description: Development server

tags:
  - name: Health
    description: Health check endpoints
  - name: Authentication
    description: User authentication operations

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check
      description: Check if the server is running and healthy
      operationId: healthCheck
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  message:
                    type: string
                    example: "Server is running"
              examples:
                success:
                  summary: Successful health check
                  value:
                    status: "OK"
                    message: "Server is running"

  /api/users/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account with email and password
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              valid_user:
                summary: Valid registration request
                value:
                  email: "john.doe@example.com"
                  password: "securepassword123"
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
              examples:
                success:
                  summary: Successful registration
                  value:
                    message: "User registered successfully"
                    user:
                      id: "674d2f8e9b1c8a3d4e5f6789"
                      email: "john.doe@example.com"
        '400':
          description: Bad request - validation error or user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                validation_error:
                  summary: Validation error
                  value:
                    error: "\"email\" must be a valid email"
                user_exists:
                  summary: User already exists
                  value:
                    error: "User already exists with this email"
                password_too_short:
                  summary: Password too short
                  value:
                    error: "\"password\" length must be at least 6 characters long"

  /api/users/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticate user and receive JWT token
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              valid_login:
                summary: Valid login request
                value:
                  email: "john.doe@example.com"
                  password: "securepassword123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              examples:
                success:
                  summary: Successful login
                  value:
                    message: "Login successful"
                    token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NzRkMmY4ZTliMWM4YTNkNGU1ZjY3ODkiLCJlbWFpbCI6ImpvaG4uZG9lQGV4YW1wbGUuY29tIiwiaWF0IjoxNzMzMTQ4NTU4LCJleHAiOjE3MzMyMzQ5NTh9.abc123def456ghi789jkl012mno345pqr678stu901vwx234yz"
                    user:
                      id: "674d2f8e9b1c8a3d4e5f6789"
                      email: "john.doe@example.com"
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                validation_error:
                  summary: Validation error
                  value:
                    error: "\"email\" is required"
        '401':
          description: Unauthorized - invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid credentials
                  value:
                    error: "Invalid email or password"

components:
  schemas:
    RegisterRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: "john.doe@example.com"
        password:
          type: string
          minLength: 6
          description: User's password (minimum 6 characters)
          example: "securepassword123"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: "john.doe@example.com"
        password:
          type: string
          description: User's password
          example: "securepassword123"

    User:
      type: object
      properties:
        id:
          type: string
          description: Unique user identifier
          example: "674d2f8e9b1c8a3d4e5f6789"
        email:
          type: string
          format: email
          description: User's email address
          example: "john.doe@example.com"

    RegisterResponse:
      type: object
      properties:
        message:
          type: string
          example: "User registered successfully"
        user:
          $ref: '#/components/schemas/User'

    LoginResponse:
      type: object
      properties:
        message:
          type: string
          example: "Login successful"
        token:
          type: string
          description: JWT authentication token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          $ref: '#/components/schemas/User'

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message describing what went wrong
          example: "Invalid email or password"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT token received from the login endpoint.
        Include it in the Authorization header as: `Bearer <token>`

# Future endpoints that might require authentication would use this security requirement
# security:
#   - BearerAuth: []
